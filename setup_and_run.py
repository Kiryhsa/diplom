"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫—É IoT Security AI Monitor
–í–∏–∫–æ–Ω—É—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫—Ä–æ–∫–∏ –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–∏ –¥–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
"""

import os
import sys
import subprocess
import time

def print_header(text):
    """–ö—Ä–∞—Å–∏–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "="*70)
    print(f"  {text}")
    print("="*70 + "\n")

def print_step(step_num, text):
    """–ö—Ä–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
    print(f"\n{'‚îÄ'*70}")
    print(f"üìç –ö—Ä–æ–∫ {step_num}: {text}")
    print(f"{'‚îÄ'*70}\n")

def check_python_version():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó Python"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω Python 3.8 –∞–±–æ –≤–∏—â–µ!")
        print(f"   –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: {version.major}.{version.minor}.{version.micro}")
        sys.exit(1)
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")

def create_directories():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π"""
    dirs = ['data', 'models', 'src']
    for dir_name in dirs:
        os.makedirs(dir_name, exist_ok=True)
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É: {dir_name}/")

def check_requirements():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤"""
    try:
        import tensorflow
        import streamlit
        import pandas
        import numpy
        import plotly
        print("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")
        return True
    except ImportError as e:
        print(f"‚ö†Ô∏è  –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: {e}")
        return False

def install_requirements():
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    print("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    print("   –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 5-10 —Ö–≤–∏–ª–∏–Ω...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", 
            "tensorflow==2.15.0",
            "streamlit==1.28.0",
            "pandas==2.1.0",
            "numpy==1.24.3",
            "plotly==5.17.0",
            "scikit-learn==1.3.0",
            "matplotlib==3.8.0",
            "seaborn==0.13.0",
            "joblib==1.3.2",
            "-q"
        ])
        print("‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
        return False

def check_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    required_files = [
        'src/__init__.py',
        'src/data_loader.py',
        'src/model_training.py',
        'src/simulator.py',
        'dashboard.py',
        'quick_start.py',
        'requirements.txt'
    ]
    
    missing = []
    for file in required_files:
        if not os.path.exists(file):
            missing.append(file)
    
    if missing:
        print("‚ö†Ô∏è  –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏:")
        for file in missing:
            print(f"   ‚ùå {file}")
        return False
    
    print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
    return True

def generate_data_and_train():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Ç–∞ –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ"""
    print("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Ç–∞ –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
    print("   –¶–µ –∑–∞–π–º–µ 5-10 —Ö–≤–∏–ª–∏–Ω. –ó–∞—á–µ–∫–∞–π—Ç–µ...")
    
    try:
        result = subprocess.run(
            [sys.executable, "quick_start.py"],
            capture_output=True,
            text=True,
            timeout=600  # 10 —Ö–≤–∏–ª–∏–Ω timeout
        )
        
        if result.returncode == 0:
            print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–≤—á–µ–Ω–∞!")
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
            # –í–∏–≤–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ä—è–¥–∫—ñ–≤ –≤–∏–≤–æ–¥—É
            lines = result.stdout.strip().split('\n')
            for line in lines[-10:]:
                print(f"   {line}")
            return True
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚è±Ô∏è  –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (10 —Ö–≤)")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False

def launch_dashboard():
    """–ó–∞–ø—É—Å–∫ Dashboard"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Dashboard...")
    print("\n" + "="*70)
    print("  Dashboard –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –∞–¥—Ä–µ—Å–æ—é: http://localhost:8501")
    print("  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
    print("="*70 + "\n")
    
    time.sleep(2)
    
    try:
        subprocess.run([sys.executable, "-m", "streamlit", "run", "dashboard.py"])
    except KeyboardInterrupt:
        print("\n\n‚úÖ Dashboard –∑—É–ø–∏–Ω–µ–Ω–æ")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print_header("üõ°Ô∏è IoT Security AI Monitor - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è")
    
    # –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python
    print_step(1, "–ü–ï–†–ï–í–Ü–†–ö–ê PYTHON")
    check_python_version()
    
    # –ö—Ä–æ–∫ 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
    print_step(2, "–°–¢–í–û–†–ï–ù–ù–Ø –°–¢–†–£–ö–¢–£–†–ò –ü–†–û–ï–ö–¢–£")
    create_directories()
    
    # –ö—Ä–æ–∫ 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤
    print_step(3, "–ü–ï–†–ï–í–Ü–†–ö–ê –§–ê–ô–õ–Ü–í")
    if not check_files():
        print("\n‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏!")
        print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∑–≥—ñ–¥–Ω–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó")
        sys.exit(1)
    
    # –ö—Ä–æ–∫ 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    print_step(4, "–ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–õ–ï–ñ–ù–û–°–¢–ï–ô")
    if not check_requirements():
        print("\nüì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
        response = input("   –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è? (y/n): ")
        if response.lower() == 'y':
            if not install_requirements():
                print("\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ")
                sys.exit(1)
        else:
            print("\n‚ö†Ô∏è  –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            sys.exit(0)
    
    # –ö—Ä–æ–∫ 5: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Ç–∞ –Ω–∞–≤—á–∞–Ω–Ω—è
    print_step(5, "–ì–ï–ù–ï–†–ê–¶–Ü–Ø –î–ê–ù–ò–• –¢–ê –ù–ê–í–ß–ê–ù–ù–Ø –ú–û–î–ï–õ–Ü")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–¥–µ–ª—å –≤–∂–µ —ñ—Å–Ω—É—î
    if os.path.exists('models/anomaly_detector.h5'):
        print("‚ÑπÔ∏è  –ú–æ–¥–µ–ª—å –≤–∂–µ —ñ—Å–Ω—É—î")
        response = input("   –ü–µ—Ä–µ–Ω–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—å? (y/n): ")
        if response.lower() == 'y':
            if not generate_data_and_train():
                print("\n‚ö†Ô∏è  –ù–∞–≤—á–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, –∞–ª–µ –º–æ–∂–Ω–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —ñ—Å–Ω—É—é—á–æ—é –º–æ–¥–µ–ª–ª—é")
    else:
        if not generate_data_and_train():
            print("\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—å")
            print("üí° –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Ä—É—á–Ω—É: python quick_start.py")
            sys.exit(1)
    
    # –ö—Ä–æ–∫ 6: –ó–∞–ø—É—Å–∫ Dashboard
    print_step(6, "–ó–ê–ü–£–°–ö DASHBOARD")
    
    print("\n‚úÖ –í—Å—ñ –ø—ñ–¥–≥–æ—Ç–æ–≤—á—ñ –∫—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ!")
    print("\n" + "="*70)
    print("  –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–û –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–á!")
    print("="*70)
    
    print("\nüìã –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏:")
    print("   ‚Ä¢ –ó–∞–ø—É—Å–∫ Dashboard:   streamlit run dashboard.py")
    print("   ‚Ä¢ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è:         python test_detection.py")
    print("   ‚Ä¢ –î–µ–º–æ-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è:   python demo_presentation.py")
    
    print("\nüéØ –†–µ–∂–∏–º–∏ Dashboard:")
    print("   1. üìä –ê–Ω–∞–ª—ñ–∑ –¥–∞—Ç–∞—Å–µ—Ç—É - –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏")
    print("   2. üé¨ Live Demo - –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –∑–∞—Ö–∏—Å—Ç—ñ")
    print("   3. üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–µ—Ä–µ–≥–ª—è–¥ –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª—ñ")
    
    response = input("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ Dashboard –∑–∞—Ä–∞–∑? (y/n): ")
    if response.lower() == 'y':
        launch_dashboard()
    else:
        print("\nüí° –ö–æ–ª–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ, –∑–∞–ø—É—Å—Ç—ñ—Ç—å: streamlit run dashboard.py")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)