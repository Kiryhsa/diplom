import numpy as np
import pandas as pd
from src.model_training import IoTAnomalyDetector
from src.simulator import IoTTrafficSimulator
import os
from datetime import datetime

def print_progress(message, progress=None):
    timestamp = datetime.now().strftime("%H:%M:%S")
    if progress:
        print(f"[{timestamp}] {message} ({progress}%)")
    else:
        print(f"[{timestamp}] {message}")

print("="*70)
print("üöÄ IoT Security AI - –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç")
print("="*70)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–æ–∫
print_progress("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...")
os.makedirs('data', exist_ok=True)
os.makedirs('models', exist_ok=True)
print_progress("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ")

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
print_progress("üìä –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö...")
simulator = IoTTrafficSimulator()
all_traffic = []

total_packets = 0
target_packets = 7750

print_progress(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è {len(simulator.device_types)} –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤...")

for i, device in enumerate(simulator.device_types, 1):
    print_progress(f"  –ü—Ä–∏—Å—Ç—Ä—ñ–π {i}/5: {device}")
    
    # –ù–æ—Ä–º–∞–ª—å–Ω–∏–π —Ç—Ä–∞—Ñ—ñ–∫
    print_progress(f"    ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ—ñ–∫—É (1000 –ø–∞–∫–µ—Ç—ñ–≤)...")
    normal = simulator.generate_normal_traffic(device, n_packets=1000)
    all_traffic.extend(normal)
    total_packets += 1000
    progress = int((total_packets / target_packets) * 100)
    print_progress(f"    ‚úì –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {total_packets}/{target_packets}", progress)
    
    # DDoS
    print_progress(f"    ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è DDoS –∞—Ç–∞–∫ (200 –ø–∞–∫–µ—Ç—ñ–≤)...")
    ddos = simulator.generate_ddos_attack(device, n_packets=200)
    all_traffic.extend(ddos)
    total_packets += 200
    progress = int((total_packets / target_packets) * 100)
    print_progress(f"    ‚úì –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {total_packets}/{target_packets}", progress)
    
    # Port Scan
    print_progress(f"    ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Port Scan (150 –ø–∞–∫–µ—Ç—ñ–≤)...")
    port_scan = simulator.generate_port_scan(device, n_packets=150)
    all_traffic.extend(port_scan)
    total_packets += 150
    progress = int((total_packets / target_packets) * 100)
    print_progress(f"    ‚úì –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {total_packets}/{target_packets}", progress)
    
    # Mirai
    print_progress(f"    ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Mirai Botnet (100 –ø–∞–∫–µ—Ç—ñ–≤)...")
    mirai = simulator.generate_mirai_botnet(device, n_packets=100)
    all_traffic.extend(mirai)
    total_packets += 100
    progress = int((total_packets / target_packets) * 100)
    print_progress(f"    ‚úì –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {total_packets}/{target_packets}", progress)

df = pd.DataFrame(all_traffic)
print_progress(f"‚úÖ –í—Å—å–æ–≥–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {len(df):,} –∑–∞–ø–∏—Å—ñ–≤")

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
print_progress("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞—Ç–∞—Å–µ—Ç—É...")
df.to_csv('data/synthetic_iot_dataset.csv', index=False)
print_progress("‚úÖ –î–∞—Ç–∞—Å–µ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: data/synthetic_iot_dataset.csv")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print("\n" + "="*70)
print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–¢–ê–°–ï–¢–£")
print("="*70)
for label, count in df['label'].value_counts().items():
    pct = (count / len(df)) * 100
    print(f"  {label:15s}: {count:5d} ({pct:5.1f}%)")

# –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –Ω–∞–≤—á–∞–Ω–Ω—è
print("\n" + "="*70)
print("üîß –ü–Ü–î–ì–û–¢–û–í–ö–ê –î–û –ù–ê–í–ß–ê–ù–ù–Ø")
print("="*70)
feature_columns = ['dur', 'spkts', 'dpkts', 'sbytes', 'dbytes', 'rate', 'sttl', 'dttl']
X = df[feature_columns]
y = (df['label'] != 'Benign').astype(int)
print_progress(f"–†–æ–∑–º—ñ—Ä –º–∞—Ç—Ä–∏—Ü—ñ –æ–∑–Ω–∞–∫: {X.shape}")
print_progress(f"Benign: {sum(y==0)} | Malicious: {sum(y==1)}")

# –ù–∞–≤—á–∞–Ω–Ω—è
print("\n" + "="*70)
print("ü§ñ –ù–ê–í–ß–ê–ù–ù–Ø TENSORFLOW –ú–û–î–ï–õ–Ü")
print("="*70)
detector = IoTAnomalyDetector(input_dim=X.shape[1])

print_progress("–ü–æ—á–∞—Ç–æ–∫ –Ω–∞–≤—á–∞–Ω–Ω—è (30 –µ–ø–æ—Ö)...")
print_progress("–¶–µ –∑–∞–π–º–µ 5-10 —Ö–≤–∏–ª–∏–Ω. –ó–∞—á–µ–∫–∞–π—Ç–µ...\n")

history, (X_test, y_test) = detector.train(X, y, epochs=30, batch_size=128, model_type='classifier')

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
print("\n" + "="*70)
print_progress("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
detector.save_model()

# –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
print("\n" + "="*70)
print("‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–û –†–û–ë–û–¢–ò!")
print("="*70)
print(f"üìä Training Accuracy:    {history.history['accuracy'][-1]*100:.2f}%")
print(f"üìä Validation Accuracy:  {history.history['val_accuracy'][-1]*100:.2f}%")
print(f"üìä Final Loss:           {history.history['loss'][-1]:.4f}")
print("="*70)

print("\nüí° –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
print("   1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å Dashboard:  streamlit run dashboard.py")
print("   2. –û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º 'Live Demo'")
print("   3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å'")
print("   4. –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—î—é! üéâ")