"""
–®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –ø—Ä–æ–≥—Ä–µ—Å—É
"""

import numpy as np
import pandas as pd
from src.model_training import IoTAnomalyDetector
from src.simulator import IoTTrafficSimulator
import os
from datetime import datetime
from tqdm import tqdm
import sys

def print_header(text):
    print("\n" + "="*70)
    print(f"{text:^70}")
    print("="*70)

def print_step(text):
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {text}")

# –ü–æ—á–∞—Ç–æ–∫
print_header("üõ°Ô∏è IoT Security AI Monitor - –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç")
print_step(f"–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏")

# –ö—Ä–æ–∫ 1: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
print_step("üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...")
os.makedirs('data', exist_ok=True)
os.makedirs('models', exist_ok=True)
print_step("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ")

# –ö—Ä–æ–∫ 2: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
print_step("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞...")
simulator = IoTTrafficSimulator()
print_step(f"‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤–∏–π. –ü—Ä–∏—Å—Ç—Ä–æ—ó–≤: {len(simulator.device_types)}")

# –ö—Ä–æ–∫ 3: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
print_header("üìä –ì–ï–ù–ï–†–ê–¶–Ü–Ø –î–ê–¢–ê–°–ï–¢–£")

all_traffic = []
device_stats = {}

# Progress bar –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
for device in tqdm(simulator.device_types, desc="üîÑ –ü—Ä–∏—Å—Ç—Ä–æ—ó", ncols=80, file=sys.stdout):
    device_traffic = []
    
    # –ù–æ—Ä–º–∞–ª—å–Ω–∏–π —Ç—Ä–∞—Ñ—ñ–∫
    for _ in tqdm(range(1000), desc=f"  ‚úì {device[:15]:15s} (Normal)", 
                  leave=False, ncols=80, file=sys.stdout):
        traffic = simulator.generate_normal_traffic(device, 1)
        device_traffic.extend(traffic)
    
    # DDoS –∞—Ç–∞–∫–∏
    for _ in tqdm(range(200), desc=f"  ‚ö†Ô∏è  {device[:15]:15s} (DDoS)  ", 
                  leave=False, ncols=80, file=sys.stdout):
        traffic = simulator.generate_ddos_attack(device, 1)
        device_traffic.extend(traffic)
    
    # Port Scan
    for _ in tqdm(range(150), desc=f"  üîç {device[:15]:15s} (Scan)  ", 
                  leave=False, ncols=80, file=sys.stdout):
        traffic = simulator.generate_port_scan(device, 1)
        device_traffic.extend(traffic)
    
    # Mirai
    for _ in tqdm(range(100), desc=f"  ü¶† {device[:15]:15s} (Mirai) ", 
                  leave=False, ncols=80, file=sys.stdout):
        traffic = simulator.generate_mirai_botnet(device, 1)
        device_traffic.extend(traffic)
    
    all_traffic.extend(device_traffic)
    device_stats[device] = len(device_traffic)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è DataFrame
print_step("üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è DataFrame...")
df = pd.DataFrame(all_traffic)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print_header("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–¢–ê–°–ï–¢–£")
print(f"{'–ü–∞—Ä–∞–º–µ—Ç—Ä':<20} {'–ó–Ω–∞—á–µ–Ω–Ω—è':>15}")
print("-" * 70)
print(f"{'–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤:':<20} {len(df):>15,}")
print(f"{'–û–∑–Ω–∞–∫:':<20} {len(df.columns):>15}")
print()

print("–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–∏–ø–∞—Ö:")
print("-" * 70)
for label, count in df['label'].value_counts().items():
    pct = (count / len(df)) * 100
    print(f"  {label:<17} {count:>6,}  ({pct:>5.1f}%)")

print()
print("–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö:")
print("-" * 70)
for device, count in device_stats.items():
    pct = (count / len(df)) * 100
    print(f"  {device:<17} {count:>6,}  ({pct:>5.1f}%)")

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
print_step("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞—Ç–∞—Å–µ—Ç—É...")
df.to_csv('data/synthetic_iot_dataset.csv', index=False)
print_step("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: data/synthetic_iot_dataset.csv")

# –ö—Ä–æ–∫ 4: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
print_header("üîß –ü–Ü–î–ì–û–¢–û–í–ö–ê –î–û –ù–ê–í–ß–ê–ù–ù–Ø")

feature_columns = ['dur', 'spkts', 'dpkts', 'sbytes', 'dbytes', 'rate', 'sttl', 'dttl']
X = df[feature_columns]
y = (df['label'] != 'Benign').astype(int)

print(f"{'–ü–∞—Ä–∞–º–µ—Ç—Ä':<25} {'–ó–Ω–∞—á–µ–Ω–Ω—è':>15}")
print("-" * 70)
print(f"{'–†–æ–∑–º—ñ—Ä –º–∞—Ç—Ä–∏—Ü—ñ –æ–∑–Ω–∞–∫:':<25} {str(X.shape):>15}")
print(f"{'Benign —Ç—Ä–∞—Ñ—ñ–∫:':<25} {sum(y==0):>15,}")
print(f"{'Malicious —Ç—Ä–∞—Ñ—ñ–∫:':<25} {sum(y==1):>15,}")
print(f"{'–°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è:':<25} {f'{sum(y==0)/sum(y==1):.2f}:1':>15}")

# –ö—Ä–æ–∫ 5: –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
print_header("ü§ñ –ù–ê–í–ß–ê–ù–ù–Ø TENSORFLOW –ú–û–î–ï–õ–Ü")

print_step("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
detector = IoTAnomalyDetector(input_dim=X.shape[1])

print_step("–ü–æ—á–∞—Ç–æ–∫ –Ω–∞–≤—á–∞–Ω–Ω—è (30 –µ–ø–æ—Ö)")
print_step("–¶–µ –∑–∞–π–º–µ 5-10 —Ö–≤–∏–ª–∏–Ω. –ó–∞—á–µ–∫–∞–π—Ç–µ...")
print()

# –ù–∞–≤—á–∞–Ω–Ω—è –∑ progress
try:
    history, (X_test, y_test) = detector.train(
        X, y, 
        epochs=30, 
        batch_size=128, 
        model_type='classifier'
    )
    
    print()
    print_step("‚úÖ –ù–∞–≤—á–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
except Exception as e:
    print()
    print_step(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
    sys.exit(1)

# –ö—Ä–æ–∫ 6: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
print_header("üíæ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ú–û–î–ï–õ–Ü")

print_step("–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ preprocessor...")
detector.save_model()
print_step("‚úÖ –ú–æ–¥–µ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ:")
print_step("   ‚Ä¢ models/anomaly_detector.h5")
print_step("   ‚Ä¢ models/preprocessor.pkl")
print_step("   ‚Ä¢ models/model_metrics.json")

# –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
print_header("‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê!")

print("\nüìä –§—ñ–Ω–∞–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏:")
print("-" * 70)
print(f"  Training Accuracy:     {history.history['accuracy'][-1]*100:6.2f}%")
print(f"  Validation Accuracy:   {history.history['val_accuracy'][-1]*100:6.2f}%")
print(f"  Training Loss:         {history.history['loss'][-1]:6.4f}")
print(f"  Validation Loss:       {history.history['val_loss'][-1]:6.4f}")

if 'precision' in history.history:
    print(f"  Precision:             {history.history['precision'][-1]*100:6.2f}%")
if 'recall' in history.history:
    print(f"  Recall:                {history.history['recall'][-1]*100:6.2f}%")

# –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
print_header("‚è±Ô∏è –ß–ê–° –í–ò–ö–û–ù–ê–ù–ù–Ø")
print_step(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
print_header("üí° –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò")
print("""
1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å Dashboard:
   streamlit run dashboard.py

2. –û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º "üé¨ Live Demo"

3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å"

4. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:
   ‚Ä¢ –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∞—Ç–∞–∫–∏: 40%
   ‚Ä¢ –®–≤–∏–¥–∫—ñ—Å—Ç—å: 2 —Å–µ–∫

5. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç"

6. –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—î—é! üéâ
""")

print("="*70)
print("üéì –ì–æ—Ç–æ–≤–æ –¥–æ –∑–∞—Ö–∏—Å—Ç—É –º–∞–≥—ñ—Å—Ç–µ—Ä—Å—å–∫–æ—ó —Ä–æ–±–æ—Ç–∏!")
print("="*70 + "\n")